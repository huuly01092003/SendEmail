import os
import smtplib
import pandas as pd
from datetime import datetime
from io import BytesIO
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

def send_emails(
    gmail_user,
    gmail_password,
    sender_name,
    excel_folder,
    email_file_path,
    ma_npp_col,
    ten_npp_col=None,
    email_npp_col=None,
    email_cc_col=None,
    selected_col_for_match=None,
    subject_template="",
    body_template="",
    start_row=2,
    end_row=99999,
    progress_callback=None
):
    """
    G·ª≠i email qua Gmail SMTP k√®m file Excel cho t·ª´ng NPP.
    Tr·∫£ v·ªÅ file CSV log d∆∞·ªõi d·∫°ng BytesIO ƒë·ªÉ t·∫£i v·ªÅ.
    
    progress_callback: function(current, total) ƒë·ªÉ update ti·∫øn ƒë·ªô
    """

    df_email = pd.read_excel(email_file_path)
    df_email = df_email.iloc[start_row-1:end_row]

    logs = []
    files = [f for f in os.listdir(excel_folder) if f.endswith(".xlsx")]
    total_files = len(files)
    print(f"üîç T√¨m th·∫•y {total_files} file ƒë·ªÉ g·ª≠i mail...\n")

    # ‚úÖ M·ªû K·∫æT N·ªêI SMTP 1 L·∫¶N v√† gi·ªØ k·∫øt n·ªëi
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587, timeout=60)
        server.starttls()
        server.login(gmail_user, gmail_password)
        print("‚úÖ ƒê√£ k·∫øt n·ªëi SMTP th√†nh c√¥ng\n")
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi Gmail SMTP: {str(e)}")
        # Tr·∫£ v·ªÅ log r·ªóng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
        df_log = pd.DataFrame(logs, columns=[
            "Th·ªùi gian", "M√£ NPP", "T√™n NPP", "Email ch√≠nh", "Email CC", "Tr·∫°ng th√°i", "L·ªói"
        ])
        output = BytesIO()
        df_log.to_csv(output, index=False, encoding="utf-8-sig")
        output.seek(0)
        return output

    current = 0
    for file in files:
        current += 1
        
        # Update progress
        if progress_callback:
            progress_callback(current, total_files)
        
        npp_code = os.path.splitext(file)[0]
        matched = df_email[df_email[selected_col_for_match].astype(str) == str(npp_code)]

        if matched.empty:
            logs.append([datetime.now(), npp_code, "", "", "", "B·ªè qua", "Kh√¥ng t√¨m th·∫•y m√£ NPP trong danh s√°ch email"])
            continue

        email_to = matched[email_npp_col].values[0] if email_npp_col in matched.columns else None
        email_cc = matched[email_cc_col].values[0] if email_cc_col and email_cc_col in matched.columns else None
        ten_npp = matched[ten_npp_col].values[0] if ten_npp_col and ten_npp_col in matched.columns else ""

        if not pd.notna(email_to) or str(email_to).strip() == "":
            logs.append([datetime.now(), npp_code, ten_npp, "", "", "B·ªè qua", "Kh√¥ng c√≥ email ƒë·ªÉ g·ª≠i"])
            continue

        msg = MIMEMultipart()
        msg["From"] = f"{sender_name} <{gmail_user}>"
        msg["To"] = email_to
        if email_cc and pd.notna(email_cc) and str(email_cc).strip() != "":
            msg["Cc"] = email_cc

        subject = subject_template.replace("{ma_npp}", npp_code).replace("{ten_npp}", str(ten_npp))
        body = body_template.replace("{ma_npp}", npp_code).replace("{ten_npp}", str(ten_npp))
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain", "utf-8"))

        attachment_path = os.path.join(excel_folder, file)
        with open(attachment_path, "rb") as f:
            part = MIMEApplication(f.read(), Name=file)
        part["Content-Disposition"] = f'attachment; filename="{file}"'
        msg.attach(part)

        try:
            # S·ª≠ d·ª•ng k·∫øt n·ªëi ƒë√£ m·ªü
            server.send_message(msg)
            logs.append([datetime.now(), npp_code, ten_npp, email_to, email_cc, "Th√†nh c√¥ng", ""])
            print(f"‚úÖ [{current}/{total_files}] G·ª≠i th√†nh c√¥ng cho {email_to} ({npp_code} - {ten_npp})")

        except Exception as e:
            err = str(e)
            logs.append([datetime.now(), npp_code, ten_npp, email_to, email_cc, "Th·∫•t b·∫°i", err])
            print(f"‚ùå [{current}/{total_files}] L·ªói g·ª≠i {email_to} ({npp_code}): {err}")

    # ‚úÖ ƒê√ìNG K·∫æT N·ªêI SAU KHI G·ª¨I XONG T·∫§T C·∫¢
    try:
        server.quit()
        print("\n‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi SMTP")
    except:
        pass

    # Ghi log ra b·ªô nh·ªõ RAM
    df_log = pd.DataFrame(logs, columns=[
        "Th·ªùi gian", "M√£ NPP", "T√™n NPP", "Email ch√≠nh", "Email CC", "Tr·∫°ng th√°i", "L·ªói"
    ])
    output = BytesIO()
    df_log.to_csv(output, index=False, encoding="utf-8-sig")
    output.seek(0)

    print("‚úÖ Ho√†n t·∫•t qu√° tr√¨nh g·ª≠i mail.\n")

    return output