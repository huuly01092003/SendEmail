import os
from dotenv import load_dotenv
from flask import Flask, render_template, request, session, redirect, url_for, jsonify, send_file
from flask_session import Session
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import pandas as pd
from datetime import datetime
from io import BytesIO
import tempfile, zipfile
import threading
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# ‚úÖ LOAD .env FILE
load_dotenv()

# ‚úÖ Flask App Config
app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'dev-secret-key')

# ‚úÖ Session Config (FIX: State kh√¥ng t·ªìn t·∫°i)
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
app.config['PERMANENT_SESSION_LIFETIME'] = 1800
app.config['SESSION_COOKIE_SECURE'] = False  # localhost kh√¥ng d√πng HTTPS
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
Session(app)

# ‚úÖ Google OAuth Config
SCOPES = ['https://www.googleapis.com/auth/gmail.send']
CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')
REDIRECT_URI = os.environ.get('REDIRECT_URI', 'http://localhost:5000/oauth2callback')

# ‚úÖ Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not CLIENT_ID or not CLIENT_SECRET:
    print("‚ö†Ô∏è WARNING: GOOGLE_CLIENT_ID ho·∫∑c GOOGLE_CLIENT_SECRET ch∆∞a ƒë∆∞·ª£c set!")
else:
    print("‚úÖ OAuth Config Loaded Successfully")
    print(f"  CLIENT_ID: {CLIENT_ID[:30]}...")
    print(f"  REDIRECT_URI: {REDIRECT_URI}")

@app.route('/auth/login')
def oauth_login():
    """Kh·ªüi t·∫°o Google OAuth flow"""
    try:
        print("\nüîµ [OAuth Login] Initiating...")
        
        # ‚úÖ X√≥a state c≈©
        if 'state' in session:
            del session['state']
        if 'flow_state' in session:
            del session['flow_state']
        
        # ‚úÖ T·∫°o flow
        flow = Flow.from_client_config(
            {
                "installed": {
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET,
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "redirect_uris": [REDIRECT_URI]
                }
            },
            scopes=SCOPES,
            redirect_uri=REDIRECT_URI
        )
        
        # ‚úÖ T·∫°o authorization URL
        auth_url, state = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true',
            prompt='consent'
        )
        
        # ‚úÖ L∆ØU STATE - QUAN TR·ªåNG!
        session['state'] = state
        session['flow_state'] = state
        session.modified = True
        
        print(f"‚úÖ State saved to session: {state[:20]}...")
        return redirect(auth_url)
        
    except Exception as e:
        print(f"‚ùå [OAuth Login] Error: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

@app.route('/oauth2callback')
def oauth_callback():
    """X·ª≠ l√Ω callback t·ª´ Google"""
    try:
        print("\nüîµ [OAuth Callback] Received callback...")
        
        # ‚úÖ Debug
        print(f"DEBUG - Session keys: {list(session.keys())}")
        
        # ‚úÖ L·∫•y state
        state_from_google = request.args.get('state')
        state_from_session = session.get('state') or session.get('flow_state')
        
        print(f"State Google: {state_from_google[:20] if state_from_google else 'None'}...")
        print(f"State Session: {state_from_session[:20] if state_from_session else 'None'}...")
        
        # ‚úÖ Ki·ªÉm tra error
        error = request.args.get('error')
        if error:
            print(f"‚ùå Error from Google: {error}")
            return f"‚ùå L·ªói: {error}", 400
        
        # ‚úÖ Ki·ªÉm tra state
        if not state_from_google or not state_from_session:
            print("‚ùå State kh√¥ng t·ªìn t·∫°i")
            return "‚ùå State kh√¥ng t·ªìn t·∫°i - ƒêƒÉng nh·∫≠p l·∫°i", 400
        
        if state_from_google != state_from_session:
            print("‚ùå State kh√¥ng kh·ªõp")
            return "‚ùå State kh√¥ng kh·ªõp - ƒêƒÉng nh·∫≠p l·∫°i", 400
        
        # ‚úÖ L·∫•y code
        code = request.args.get('code')
        if not code:
            return "‚ùå Kh√¥ng c√≥ authorization code", 400
        
        print(f"‚úÖ Authorization code: {code[:20]}...")
        
        # ‚úÖ Exchange code ‚Üí token
        flow = Flow.from_client_config(
            {
                "installed": {
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET,
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "redirect_uris": [REDIRECT_URI]
                }
            },
            scopes=SCOPES,
            state=state_from_google,
            redirect_uri=REDIRECT_URI
        )
        
        flow.fetch_token(authorization_response=request.url)
        credentials = flow.credentials
        
        print(f"‚úÖ Tokens received")
        
        # ‚úÖ L·∫•y email
        service = build('gmail', 'v1', credentials=credentials)
        profile = service.users().getProfile(userId='me').execute()
        user_email = profile.get('emailAddress', '')
        
        # ‚úÖ L∆∞u session
        session['credentials'] = {
            'token': credentials.token,
            'refresh_token': credentials.refresh_token,
            'token_uri': credentials.token_uri,
            'client_id': credentials.client_id,
            'client_secret': credentials.client_secret,
            'scopes': credentials.scopes
        }
        session['user_email'] = user_email
        session.modified = True
        
        print(f"‚úÖ Logged in: {user_email}\n")
        
        return redirect(url_for('index'))
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()
        return f"‚ùå L·ªói: {str(e)}", 500

@app.route('/auth/logout')
def oauth_logout():
    """ƒêƒÉng xu·∫•t"""
    user_email = session.get('user_email', 'Unknown')
    print(f"\n‚úÖ Logged out: {user_email}")
    session.clear()
    return redirect(url_for('index'))
# ==================== HELPER FUNCTIONS ====================

def refresh_access_token_if_needed(credentials):
    """L√†m m·ªõi access token n·∫øu h·∫øt h·∫°n"""
    if credentials.expired and credentials.refresh_token:
        print("‚ö†Ô∏è [Token Refresh] Access token expired - Refreshing...")
        credentials.refresh(Request())
        print("‚úÖ [Token Refresh] Access token refreshed")
    return credentials

# ==================== MAIN ROUTES ====================

@app.route('/')
def index():
    user_email = session.get('user_email')
    return render_template('index_multiuser.html', user_email=user_email)

@app.route('/split', methods=['POST'])
def split_route():
    """T√°ch file Excel (kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p)"""
    try:
        from modules.excel_splitter import split_excel
        return split_excel()
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/send_emails', methods=['POST'])
def send_emails_route():
    """G·ª≠i email (c·∫ßn ƒëƒÉng nh·∫≠p)"""
    try:
        # ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if 'user_email' not in session:
            return jsonify({'error': 'Vui l√≤ng ƒëƒÉng nh·∫≠p Gmail tr∆∞·ªõc'}), 401
        
        if 'credentials' not in session:
            return jsonify({'error': 'OAuth token kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'}), 401
        
        print(f"\nüîµ [Send Emails] Started by: {session['user_email']}")
        
        job_id = datetime.now().strftime('%Y%m%d_%H%M%S')
        sender_name = request.form.get('sender_name', 'System')
        
        ref_col = request.form['ref_col']
        name_col = request.form.get('name_col')
        email_col = request.form['email_col']
        cc_col = request.form.get('cc_col')
        subject = request.form['subject']
        body = request.form['body']
        
        start_row_email = int(request.form.get('start_row_email', 2))
        end_row_email = int(request.form.get('end_row_email', 99999))
        
        split_zip = request.files.get('split_zip')
        email_file = request.files.get('email_file')
        
        if not split_zip or not email_file:
            return jsonify({'error': 'Vui l√≤ng upload ƒë·ªß file (ZIP + Email list)'}), 400
        
        temp_dir = tempfile.mkdtemp()
        
        zip_path = os.path.join(temp_dir, "split.zip")
        excel_email_path = os.path.join(temp_dir, "emails.xlsx")
        
        split_zip.save(zip_path)
        email_file.save(excel_email_path)
        
        extract_folder = os.path.join(temp_dir, "excel_files")
        os.makedirs(extract_folder, exist_ok=True)
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(extract_folder)
        
        email_status[job_id] = {
            'status': 'processing',
            'progress': 0,
            'total': 0,
            'log_buffer': None
        }
        
        def send_in_background():
            try:
                from modules.email_sender_oauth import send_emails_oauth
                
                # ‚úÖ Kh√¥i ph·ª•c credentials t·ª´ session
                creds_dict = session['credentials']
                credentials = Credentials(
                    token=creds_dict['token'],
                    refresh_token=creds_dict['refresh_token'],
                    token_uri=creds_dict['token_uri'],
                    client_id=creds_dict['client_id'],
                    client_secret=creds_dict['client_secret'],
                    scopes=creds_dict['scopes']
                )
                
                log_buffer = send_emails_oauth(
                    credentials=credentials,
                    sender_email=session['user_email'],
                    sender_name=sender_name,
                    excel_folder=extract_folder,
                    email_file_path=excel_email_path,
                    ref_col=ref_col,
                    name_col=name_col,
                    email_col=email_col,
                    cc_col=cc_col,
                    selected_col_for_match=ref_col,
                    subject_template=subject,
                    body_template=body,
                    start_row=start_row_email,
                    end_row=end_row_email,
                    progress_callback=lambda current, total: update_progress(job_id, current, total)
                )
                email_status[job_id]['status'] = 'completed'
                email_status[job_id]['log_buffer'] = log_buffer
                print(f"‚úÖ [Send Emails] Completed successfully")
            except Exception as e:
                email_status[job_id]['status'] = 'failed'
                email_status[job_id]['error'] = str(e)
                print(f"‚ùå [Send Emails] Failed: {str(e)}")
        
        thread = threading.Thread(target=send_in_background)
        thread.start()
        
        return jsonify({
            'job_id': job_id,
            'message': 'ƒêang x·ª≠ l√Ω g·ª≠i email...'
        })
    
    except Exception as e:
        print(f"‚ùå [Send Emails] Error: {str(e)}")
        return jsonify({'error': str(e)}), 500

def update_progress(job_id, current, total):
    if job_id in email_status:
        email_status[job_id]['progress'] = current
        email_status[job_id]['total'] = total

@app.route('/check_status/<job_id>', methods=['GET'])
def check_status(job_id):
    if job_id not in email_status:
        return jsonify({'error': 'Job not found'}), 404
    
    status = email_status[job_id]
    return jsonify({
        'status': status['status'],
        'progress': status.get('progress', 0),
        'total': status.get('total', 0)
    })

@app.route('/download_log/<job_id>', methods=['GET'])
def download_log(job_id):
    if job_id not in email_status:
        return "Job not found", 404
    
    if email_status[job_id]['status'] != 'completed':
        return "Job not completed yet", 400
    
    log_buffer = email_status[job_id]['log_buffer']
    if not log_buffer:
        return "No log available", 404
    
    filename = f"email_log_{job_id}.csv"
    return send_file(log_buffer, as_attachment=True, download_name=filename, mimetype="text/csv")

if __name__ == '__main__':
    app.run(debug=True, port=5000)